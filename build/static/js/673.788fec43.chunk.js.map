{"version":3,"file":"static/js/673.788fec43.chunk.js","mappings":"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","sources":["../node_modules/@arnab7/cheesejs/dist/esm/BoardTypes-d86232b4.js","../node_modules/@arnab7/cheesejs/dist/esm/chess-board.entry.js","../node_modules/@arnab7/cheesejs/dist/esm/chessboard-456a9829.js"],"sourcesContent":["/**\n * BoardArray is a 2D representation of a Chess board.\n * Each row correspondes to the ranks of a Chess board\n * and each column to the files. Each square's uniqie address\n * on the Chess board can be found with `BoardArray[rank][file]\n */\nconst BoardArray = [\n  ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8'],\n  ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7'],\n  ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6'],\n  ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5'],\n  ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4'],\n  ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3'],\n  ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2'],\n  ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'],\n];\n/**\n * Object representation of a (currently empty) Chess board\n */\nconst BoardMap = {\n  a: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  b: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  c: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  d: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  e: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  f: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  g: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  h: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n};\n\nexport { BoardMap as B, BoardArray as a };\n","import { r as registerInstance, h } from './index-bf3a8cd4.js';\nimport { g as generateChessBoard } from './chessboard-456a9829.js';\nimport './BoardTypes-d86232b4.js';\n\nconst chessBoardCss = \"#chess-board-container{position:relative;width:400px;height:400px;border:1px solid black}.row{display:flex;flex-direction:row;width:100%;height:50px}.square{width:50px;height:50px;border:0.1px black}.piece{display:flex;justify-content:center;align-items:center;touch-action:none;cursor:grab;cursor:move}.dragging{transform:scale(1.2);transition:0.2s ease-in-out}.invisible{display:none}@media (max-width: 550px){#chess-board-container{width:360px;height:360px}.row{height:45px}.square{width:45px;height:45px}.piece{height:40px}}\";\n\nconst ChessBoard = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.light = '#E0C35A';\n    this.dark = '#7A6A31';\n    this.fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\n  }\n  // This method is called when the component has finished loading\n  componentDidLoad() {\n    // Set the inner HTML of the checkerboard container to the HTML string for the checkered board\n    this.chessBoardContainer.innerHTML = generateChessBoard(this.light, this.dark, this.fen);\n    // Get all the pieces and squares in the chess board\n    const pieces = this.chessBoardContainer.querySelectorAll('.piece');\n    const squares = this.chessBoardContainer.querySelectorAll('.square');\n    // Add drag and drop event listeners to each piece\n    pieces.forEach((piece) => {\n      // When a piece is dragged, add the 'dragging' and 'invisible' classes to it\n      piece.addEventListener('dragstart', () => {\n        setTimeout(() => {\n          piece.classList.add('dragging', 'invisible');\n        }, 0);\n      });\n      // When a piece is dropped, remove the 'dragging' and 'invisible' classes from it\n      piece.addEventListener('dragend', () => {\n        piece.classList.remove('dragging', 'invisible');\n      });\n      piece.addEventListener('click', () => {\n        if (piece.classList.contains('dragging')) {\n          piece.classList.remove('dragging');\n          return;\n        }\n        const otherHighlightedPiece = this.chessBoardContainer.querySelector('.dragging');\n        if (otherHighlightedPiece !== null) {\n          const parentSquare = piece.parentElement;\n          parentSquare.innerHTML = '';\n          parentSquare.appendChild(otherHighlightedPiece);\n          otherHighlightedPiece.classList.remove('dragging');\n          return;\n        }\n        piece.classList.add('dragging');\n      });\n    });\n    // Add drag and drop event listeners to each square\n    squares.forEach((square) => {\n      // Allow dropping on the square by preventing the default behavior\n      square.addEventListener('dragover', (e) => {\n        e.preventDefault();\n      });\n      // When a piece is dropped on a square, append the piece to the square and clear the square's inner HTML\n      square.addEventListener('drop', (e) => {\n        e.preventDefault();\n        const pieceBeingDragged = this.chessBoardContainer.querySelector('.dragging');\n        square.innerHTML = '';\n        square.appendChild(pieceBeingDragged);\n      });\n      square.addEventListener('click', (e) => {\n        e.preventDefault();\n        const pieceBeingDragged = this.chessBoardContainer.querySelector('.dragging');\n        if (pieceBeingDragged === null)\n          return;\n        if (!(pieceBeingDragged.parentElement.id === square.id)) {\n          pieceBeingDragged.classList.remove('dragging');\n        }\n        square.innerHTML = '';\n        square.appendChild(pieceBeingDragged);\n      });\n    });\n  }\n  render() {\n    return (h(\"div\", { ref: (el) => (this.chessBoardContainer = el), id: \"chess-board-container\" }));\n  }\n};\nChessBoard.style = chessBoardCss;\n\nexport { ChessBoard as chess_board };\n","import { B as BoardMap, a as BoardArray } from './BoardTypes-d86232b4.js';\n\n/**\n * This enum matches with the piece representations of an FEN string.\n * Capital letter for white pieces and small letter for black pieces\n */\nvar PieceType;\n(function (PieceType) {\n  PieceType[\"whitePawn\"] = \"P\";\n  PieceType[\"blackPawn\"] = \"p\";\n  PieceType[\"whiteRook\"] = \"R\";\n  PieceType[\"blackRook\"] = \"r\";\n  PieceType[\"whiteKnight\"] = \"N\";\n  PieceType[\"blackKnight\"] = \"n\";\n  PieceType[\"whiteBishop\"] = \"B\";\n  PieceType[\"blackBishop\"] = \"b\";\n  PieceType[\"whiteQueen\"] = \"Q\";\n  PieceType[\"blackQueen\"] = \"q\";\n  PieceType[\"whiteKing\"] = \"K\";\n  PieceType[\"blackKing\"] = \"k\";\n})(PieceType || (PieceType = {}));\n\n/**\n * Object that holds the svg.png links for all the Chess pieces\n */\nconst pieceImages = {\n  'K': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Chess_klt45.svg/45px-Chess_klt45.svg.png',\n  'k': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Chess_kdt45.svg/45px-Chess_kdt45.svg.png',\n  'Q': 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Chess_qlt45.svg/45px-Chess_qlt45.svg.png',\n  'q': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Chess_qdt45.svg/45px-Chess_qdt45.svg.png',\n  'R': 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Chess_rlt45.svg/45px-Chess_rlt45.svg.png',\n  'r': 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Chess_rdt45.svg/45px-Chess_rdt45.svg.png',\n  'B': 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Chess_blt45.svg/45px-Chess_blt45.svg.png',\n  'b': 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Chess_bdt45.svg/45px-Chess_bdt45.svg.png',\n  'N': 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Chess_nlt45.svg/45px-Chess_nlt45.svg.png',\n  'n': 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/ef/Chess_ndt45.svg/45px-Chess_ndt45.svg.png',\n  'P': 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Chess_plt45.svg/45px-Chess_plt45.svg.png',\n  'p': 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Chess_pdt45.svg/45px-Chess_pdt45.svg.png'\n};\n\n/**\n * getPieceImage takes a piece type and color and returns the corresponding symbol for the piece,\n * and function then creates an HTML string to add the pieces to the squares\n */\nconst getPieceImage = (type, color, BoardArray, rank, file) => {\n  switch (type) {\n    case PieceType.whitePawn:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"P\" alt='white pawn' class=\"piece\" draggable=\"true\" src=${pieceImages.P}></div>`;\n    case PieceType.blackPawn:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"p\" alt='black pawn' class=\"piece\" draggable=\"true\" src=${pieceImages.p}></div>`;\n    case PieceType.whiteRook:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"R\" alt='white rook' class=\"piece\" draggable=\"true\" src=${pieceImages.R}></div>`;\n    case PieceType.blackRook:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"r\" alt='black rook' class=\"piece\" draggable=\"true\" src=${pieceImages.r}></div>`;\n    case PieceType.whiteKnight:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"N\" alt='white knight' class=\"piece\" draggable=\"true\" src=${pieceImages.N}></div>`;\n    case PieceType.blackKnight:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"n\" alt='black knight' class=\"piece\" draggable=\"true\" src=${pieceImages.n}></div>`;\n    case PieceType.whiteBishop:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"B\" alt='white bishop' class=\"piece\" draggable=\"true\" src=${pieceImages.B}></div>`;\n    case PieceType.blackBishop:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"b\" alt='black bishop' class=\"piece\" draggable=\"true\" src=${pieceImages.b}></div>`;\n    case PieceType.whiteQueen:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"Q\" alt='white queen' class=\"piece\" draggable=\"true\" src=${pieceImages.Q}></div>`;\n    case PieceType.blackQueen:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"q\" alt='black queen' class=\"piece\" draggable=\"true\" src=${pieceImages.q}></div>`;\n    case PieceType.whiteKing:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"K\" alt='white king' class=\"piece\" draggable=\"true\" src=${pieceImages.K}></div>`;\n    case PieceType.blackKing:\n      return `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"><img id=\"k\" alt='black king' class=\"piece\" draggable=\"true\" src=${pieceImages.k}></div>`;\n    default:\n      return '';\n  }\n};\n/**\n * fenToBoardMap takes one optional input\n * @param fen : an FEN string of a vlid Chess position. If no FEN\n * os provided then uses the FEN for the starting position and\n * @returns an object representation of a Chess board and places pieces\n * according to the FEN\n */\nconst fenToBoardMap = (fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR') => {\n  const rows = fen.split('/');\n  // create a copy of the BoardMap\n  const board = Object.assign({}, BoardMap);\n  let piece = '';\n  // Iterate over the ranks and files of the Chess board array\n  for (let rank = 0; rank < BoardArray.length; rank++) {\n    for (let file = 0; file < BoardArray.length; file++) {\n      piece = rows[rank][file];\n      // Each square is a 2 character string, like 'a1'\n      // The following code will extract the file and rank out of each square\n      let currentSquare = BoardArray[rank][file];\n      let currentFile = currentSquare[0];\n      let currentRank = currentSquare[1];\n      // if the piece is a character, it is a piece\n      if (typeof piece === 'string' && piece.match(/[a-zA-Z]/)) {\n        board[currentFile][currentRank] = piece;\n      }\n      else if (typeof parseInt(piece) === 'number') {\n        // If the piece is a number then it is the number of empty squares\n        // Sp ;oop through the array and increment the file to leave out the empty squares\n        for (let empties = 0; empties < parseInt(piece); empties++) {\n          file++;\n        }\n      }\n    }\n  }\n  return board;\n};\n\n// To learn about FEN stings, visit: https://www.chess.com/terms/fen-chess\n/**\n * generateChessBoard is a function that takes three optional arguments:\n * @param lightSquareColor string representing the color of the light squares on the chess board\n * @param darkSquareColor string representing the color of the dark squares on the chess board\n * @param fen string representing the FEN notation of the current state of the chess board\n * and returns an HTML string representing the chess board with the given colors and piece positions\n */\nconst generateChessBoard = (lightSquareColor, darkSquareColor, fen) => {\n  // split the FEN notation into rows\n  const rows = fen.split('/');\n  // array to store the colors of the squares on the chess board\n  const colorArray = [lightSquareColor, darkSquareColor];\n  // index to keep track of the current color of the square\n  let currentColorIndex = 0;\n  // color of the current square\n  let color = ``;\n  // HTML string to store the HTML representation of the chess board\n  let html = ``;\n  // iterate through each row of the chess board\n  for (let rank = 0; rank < BoardArray.length; rank++) {\n    // add opening div tag for the row to the HTML string\n    html += `<div class=\"row\">`;\n    // iterate through each square in the row\n    for (let file = 0; file < BoardArray.length; file++) {\n      // get the FEN notation for the current square\n      let square = rows[rank][file];\n      // set the color of the square to the current color\n      color = colorArray[currentColorIndex];\n      // if the square is a character, it is a piece\n      if (typeof square === 'string' && square.match(/[a-zA-Z]/)) {\n        // add the HTML returned from the getPieeImage\n        html += getPieceImage(square, color, BoardArray, rank, file);\n        // toggle the current color index to switch the color of the next square\n        currentColorIndex = (currentColorIndex + 1) % 2;\n      }\n      else if (typeof parseInt(square) === 'number') {\n        // if the square is a number, it represents empty squares\n        // if the number is >1, then it means there are that many empty squares\n        // add the number of empty squares to the HTML string\n        for (let k = 0; k < parseInt(square); k++) {\n          html += `<div id=\"${BoardArray[rank][file]}\" class=\"square\" style=\"background-color: ${color}\"></div>`;\n          currentColorIndex = (currentColorIndex + 1) % 2;\n          color = colorArray[currentColorIndex];\n          file++;\n        }\n      }\n    }\n    // toggle the current color index to switch the color of the first square in the next row\n    currentColorIndex = (currentColorIndex + 1) % 2;\n    // add the closing div tag for the rows\n    html += `</div>`;\n  }\n  return html;\n};\n\nexport { fenToBoardMap as f, generateChessBoard as g, pieceImages as p };\n"],"names":["BoardArray","BoardMap","a","b","c","d","e","f","g","h","ChessBoard","hostRef","registerInstance","this","light","dark","fen","chessBoardContainer","innerHTML","generateChessBoard","pieces","querySelectorAll","squares","forEach","piece","addEventListener","setTimeout","classList","add","remove","contains","otherHighlightedPiece","querySelector","parentSquare","parentElement","appendChild","square","preventDefault","pieceBeingDragged","id","ref","el","style","PieceType","pieceImages","getPieceImage","type","color","rank","file","whitePawn","P","blackPawn","p","whiteRook","R","blackRook","r","whiteKnight","N","blackKnight","n","whiteBishop","B","blackBishop","whiteQueen","Q","blackQueen","q","whiteKing","K","blackKing","k","fenToBoardMap","rows","split","board","Object","assign","currentSquare","currentFile","currentRank","match","parseInt","empties","lightSquareColor","darkSquareColor","colorArray","currentColorIndex","html"],"sourceRoot":""}