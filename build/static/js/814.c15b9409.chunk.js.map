{"version":3,"file":"static/js/814.c15b9409.chunk.js","mappings":"qKAMA,IAAMA,EAAa,CACjB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAKvCC,EAAW,CACfiHC/DHC,EAAY,WAChB,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,MAAQ,UACbD,KAAKE,KAAO,SACd,CAQC,OAPD,wCACA,WAEEF,KAAKG,sBAAsBC,UAlCA,SAACC,EAAkBC,GAMhD,IAJA,IAEIC,EAAO,GAEFC,EAAI,EAAGA,EAAIrB,EAAAA,EAAAA,OAAmBqB,IAAK,CAE1CD,GAAQ,oBAER,IAAK,IAAIE,EAAI,EAAGA,EAAItB,EAAAA,EAAAA,OAAmBsB,IAIrCF,GAAQ,gDAAJ,QAFKC,EAAIC,GAAK,IAAM,EAAIJ,EAAmBC,EAEc,YAG/DC,GAAQ,QACV,CAEA,OAAOA,CACT,CAa2CG,CAAuBV,KAAKC,MAAOD,KAAKE,KACjF,GAAC,oBACD,WAAS,WACP,OAAQN,EAAAA,EAAAA,GAAE,MAAO,CAAEe,IAAK,SAACC,GAAE,OAAM,EAAKT,sBAAwBS,CAAE,EAAGC,GAAI,2BACzE,KAAC,EAbe,GAelBhB,EAAaiB,MAjBW,8R","sources":["../node_modules/@arnab7/cheesejs/dist/esm/BoardTypes-d86232b4.js","../node_modules/@arnab7/cheesejs/dist/esm/checker-board.entry.js"],"sourcesContent":["/**\n * BoardArray is a 2D representation of a Chess board.\n * Each row correspondes to the ranks of a Chess board\n * and each column to the files. Each square's uniqie address\n * on the Chess board can be found with `BoardArray[rank][file]\n */\nconst BoardArray = [\n  ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8'],\n  ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7'],\n  ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6'],\n  ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5'],\n  ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4'],\n  ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3'],\n  ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2'],\n  ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'],\n];\n/**\n * Object representation of a (currently empty) Chess board\n */\nconst BoardMap = {\n  a: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  b: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  c: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  d: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  e: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  f: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  g: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n  h: {\n    '1': '',\n    '2': '',\n    '3': '',\n    '4': '',\n    '5': '',\n    '6': '',\n    '7': '',\n    '8': '',\n  },\n};\n\nexport { BoardMap as B, BoardArray as a };\n","import { r as registerInstance, h } from './index-bf3a8cd4.js';\nimport { a as BoardArray } from './BoardTypes-d86232b4.js';\n\n/**\n * generateCheckeredBoard is a function that takes two required arguments:\n * @param lightSquareColor string representing the color of the light squares on the chess board\n * @param darkSquareColor string representing the color of the dark squares on the chess board\n *\n * and returns an HTML string representing a checkered board with the given colors.\n */\nconst generateCheckeredBoard = (lightSquareColor, darkSquareColor) => {\n  // The current color that is being used\n  let color;\n  // The html string that will be returned\n  let html = ``;\n  // Loop through each row in the board\n  for (let i = 0; i < BoardArray.length; i++) {\n    // Add the opening tag for the row and set its background color to the current color\n    html += `<div class='row'>`;\n    // Loop through each square in the row\n    for (let j = 0; j < BoardArray.length; j++) {\n      // Determine the background color of the square\n      color = (i + j) % 2 === 0 ? lightSquareColor : darkSquareColor;\n      // Add a div element for the square and set its background color to the current color\n      html += `<div class='square' style='background-color: ${color}'></div>`;\n    }\n    // Add the closing tag for the row\n    html += `</div>`;\n  }\n  // Return the html string\n  return html;\n};\n\nconst checkerBoardCss = \"#checker-board-container{position:relative;width:400px;height:400px}.row{display:flex;flex-direction:row;width:100%;height:50px}.square{width:50px;height:50px}@media (max-width: 550px){#checker-board-container{width:360px;height:360px}.row{height:45px}.square{width:45px;height:45px}}\";\n\nconst Checkerboard = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.light = '#E0C35A';\n    this.dark = '#7A6A31';\n  }\n  // This method is called when the component has finished loading\n  componentDidLoad() {\n    // Set the inner html of the checkerboard container to the html string for the checkered board\n    this.checkerboardContainer.innerHTML = generateCheckeredBoard(this.light, this.dark);\n  }\n  render() {\n    return (h(\"div\", { ref: (el) => (this.checkerboardContainer = el), id: \"checker-board-container\" }));\n  }\n};\nCheckerboard.style = checkerBoardCss;\n\nexport { Checkerboard as checker_board };\n"],"names":["BoardArray","BoardMap","a","b","c","d","e","f","g","h","Checkerboard","hostRef","registerInstance","this","light","dark","checkerboardContainer","innerHTML","lightSquareColor","darkSquareColor","html","i","j","generateCheckeredBoard","ref","el","id","style"],"sourceRoot":""}